'use strict'
const createTestWithParameters = require('../utils/create-test-with-parameters.js')
const hasNegationInsideParens = require('../utils/has-negation-inside-parens.js')
const hasBooleanContext = require('../utils/has-boolean-context.js')
const applyToProperty = require('../utils/apply-to-property.js')
const getNodeContent = require('../utils/get-node-content.js')
const isConjunction = require('../utils/is-conjunction.js')
const sanitizeCode = require('../utils/sanitize-code.js')
const isPureGroup = require('../utils/is-pure-group.js')
const isNegated = require('../utils/is-negated.js')
const transform = require('../utils/transform.js')
const _package = require('../package.json.js')
const not = require('../utils/not.js')
const or = require('../utils/or.js')
const noNegatedConjunction = {
  create: context => ({
    UnaryExpression: node => {
      let test = createTestWithParameters.createTestWithParameters(
        node,
        context,
      )
      if (
        test(
          isNegated.isNegated,
          applyToProperty.applyToProperty(
            'argument',
            isConjunction.isConjunction,
          ),
          isPureGroup.isPureGroup,
          or.or(
            hasBooleanContext.hasBooleanContext,
            not.not(hasNegationInsideParens.hasNegationInsideParens),
          ),
        )
      ) {
        let shouldWrapInParens = isConjunction.isConjunction(node.parent)
        let fixedExpression = transform.transform({
          expressionType: 'conjunction',
          shouldWrapInParens,
          context,
          node,
        })
        if (fixedExpression) {
          let originalExpression = getNodeContent.getNodeContent(node, context)
          context.report({
            data: {
              original: sanitizeCode.sanitizeCode(originalExpression),
              fixed: sanitizeCode.sanitizeCode(fixedExpression),
            },
            fix: fixer => fixer.replaceText(node, fixedExpression),
            messageId: 'convertNegatedConjunction',
            node,
          })
        }
      }
    },
  }),
  meta: {
    docs: {
      description:
        'Transforms the negation of a conjunction !(A && B) into the equivalent !A || !B according to De Morganâ€™s law',
      url: `https://github.com/${_package.repository}/blob/main/docs/no-negated-conjunction.md`,
      category: 'Best Practices',
      recommended: true,
    },
    messages: {
      convertNegatedConjunction:
        'Replace negated conjunction `{{ original }}` with `{{ fixed }}`',
    },
    type: 'suggestion',
    fixable: 'code',
    schema: [],
  },
}
module.exports = noNegatedConjunction
