'use strict'
Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' })
const findOutermostParenthesizedNode = require('./find-outermost-parenthesized-node.js')
const hasNegationOperator = require('./has-negation-operator.js')
const isLogicalExpression = require('./is-logical-expression.js')
const isUnaryExpression = require('./is-unary-expression.js')
const getNodeContent = require('./get-node-content.js')
let hasNegationInside = node => {
  if (
    isUnaryExpression.isUnaryExpression(node) &&
    node.operator === '!' &&
    isUnaryExpression.isUnaryExpression(node.argument) &&
    node.argument.operator === '!'
  ) {
    return hasNegationInside(node.argument.argument)
  }
  if (hasNegationOperator.hasNegationOperator(node)) {
    return true
  }
  if (isLogicalExpression.isLogicalExpression(node)) {
    return hasNegationInside(node.left) || hasNegationInside(node.right)
  }
  return false
}
let hasNegationInsideParens = (node, context) => {
  let sourceCode = getNodeContent.getNodeContent(node, context)
  let outermostNode =
    findOutermostParenthesizedNode.findOutermostParenthesizedNode(
      node,
      sourceCode,
    )
  if (!isUnaryExpression.isUnaryExpression(outermostNode)) {
    return false
  }
  return hasNegationInside(outermostNode.argument)
}
exports.hasNegationInsideParens = hasNegationInsideParens
