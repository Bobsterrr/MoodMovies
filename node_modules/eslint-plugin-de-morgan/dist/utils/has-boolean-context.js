'use strict'
Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' })
const isBinaryExpression = require('./is-binary-expression.js')
let hasBooleanContext = (node, _context) =>
  node.parent
    ? isControlFlowBooleanContext(node.parent) ||
      isBooleanOperation(node.parent) ||
      isBooleanFunction(node.parent)
    : false
let isControlFlowBooleanContext = parent =>
  booleanControlFlowNodes.has(parent.type)
let booleanControlFlowNodes = /* @__PURE__ */ new Set([
  'ConditionalExpression',
  'LogicalExpression',
  'DoWhileStatement',
  'UnaryExpression',
  'WhileStatement',
  'ForStatement',
  'IfStatement',
])
let isBooleanOperation = parent =>
  isBinaryExpression.isBinaryExpression(parent) &&
  booleanOperators.has(parent.operator)
let booleanOperators = /* @__PURE__ */ new Set([
  'instanceof',
  '===',
  '!==',
  '==',
  '!=',
  '<=',
  '>=',
  'in',
  '<',
  '>',
])
let isBooleanFunction = parent =>
  parent.type === 'CallExpression' &&
  parent.callee.type === 'Identifier' &&
  parent.callee.name === 'Boolean'
exports.hasBooleanContext = hasBooleanContext
